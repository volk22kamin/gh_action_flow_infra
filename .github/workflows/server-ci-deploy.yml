name: Server CI + Deploy (ECS)

on:
  push:
    branches: [ main ]
    paths:
      - 'application_code/server/**'
      - '.github/workflows/server-ci-deploy.yml'
  pull_request:
    paths:
      - 'application_code/server/**'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

concurrency:
  group: server-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_DIR: application_code/server

jobs:
  ci:
    name: Build & Test & Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ env.APP_DIR }}/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Run tests
        run: npm test --if-present

      - name: Build Docker image (local only)
        run: |
          echo "Building image for scanâ€¦"
          docker build -t local/server:ci .

      - name: Trivy scan (fail on HIGH,CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'local/server:ci'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

  deploy:
    name: Push to ECR + Update ECS service
    needs: [ci]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tags
        id: tags
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}"
          SHA_TAG="${IMAGE}:${GITHUB_SHA::12}"
          LATEST_TAG="${IMAGE}:latest"
          echo "image=${IMAGE}"   >> $GITHUB_OUTPUT
          echo "sha=${SHA_TAG}"   >> $GITHUB_OUTPUT
          echo "latest=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.APP_DIR }}
          push: true
          tags: |
            ${{ steps.tags.outputs.sha }}
            ${{ steps.tags.outputs.latest }}

      # Render a new task definition from the LIVE service's current TD
      - name: Prepare new task definition (swap image)
        id: render
        env:
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}        # name or ARN
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}        # name or ARN
          CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}  # e.g., nodejs-container
          NEW_IMAGE: ${{ steps.tags.outputs.sha }}
        run: |
          set -euo pipefail
          # Get the task definition ARN currently used by the service
          TD_ARN=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --query 'services[0].taskDefinition' \
            --output text)

          # Fetch the TD JSON and strip readonly fields
          aws ecs describe-task-definition \
            --task-definition "$TD_ARN" \
            --query 'taskDefinition' --output json \
          | jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy,.inferenceAccelerators,.ephemeralStorage)' \
          | jq --arg NAME "$CONTAINER_NAME" --arg IMG "$NEW_IMAGE" '
              .containerDefinitions = (
                .containerDefinitions | map(
                  if .name == $NAME then .image = $IMG | . else . end
                )
              )' \
          > rendered-taskdef.json

          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://rendered-taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "td=$NEW_TD_ARN" >> $GITHUB_OUTPUT

      - name: Update service to new revision
        env:
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}
          NEW_TD_ARN: ${{ steps.render.outputs.td }}
        run: |
          set -euo pipefail
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "$NEW_TD_ARN"

          # Optional: scale up from 0 for a dev run
          # aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --desired-count 1

      - name: Wait for stability
        env:
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}
        run: |
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
